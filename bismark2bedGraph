#!/usr/bin/perl
use warnings;
use strict;
$|++;
use Getopt::Long;
use Cwd;
use Carp;

my @bedfiles;
my @methylcalls = qw (0 0 0); # [0] = methylated, [1] = unmethylated, [2] = total
my @sorting_files;
my ($bedGraph_output,$output_dir,$remove,$CX_context,$no_header,$sort_size,$coverage_threshold,$counts) = process_commandline();

# warn "Using these input files: @sorting_files\n";

warn "Summary of parameters for bismark2bedGraph conversion:\n";
warn '='x64,"\n";
warn "bedGraph output:\t\t$bedGraph_output\n";
warn "output directory:\t\t>$output_dir<\n";
if ($remove){
  warn "remove whitespaces:\t\tyes\n";
}
else{
  warn "remove whitespaces:\t\tno\n";
}
if ($CX_context){
  warn "CX context:\t\t\tyes\n";
}
else{
  warn "CX context:\t\t\tno (CpG context only, default)\n";
}
if ($no_header){
  warn "No-header selected:\t\tyes\n";
}
else{
  warn "No-header selected:\t\tno\n";
}
warn "Sort buffer size:\t\t$sort_size\n";
warn "Coverage threshold:\t\t$coverage_threshold\n";
if ($counts){
  warn "Counts requested:\t\tyes\n\n\n";
}
else{
  warn "Counts requested:\t\tno\n\n\n";
}


sub process_commandline{
  my $help;
  my $output_dir;
  my $bedGraph_output;
  my $no_header;
  my $coverage_threshold; # Minimum number of reads covering before calling methylation status
  my $remove;
  my $counts;
  my $CX_context;
  my $sort_size;

  my $command_line = GetOptions ('help|man' => \$help,
				 'dir=s' => \$output_dir,
				 'o|output=s' => \$bedGraph_output,
				 'no_header' => \$no_header,
				 "cutoff=i" => \$coverage_threshold,
				 "remove_spaces" => \$remove,
				 "counts" => \$counts,
				 "CX|CX_context" => \$CX_context,
				 "buffer_size=s" => \$sort_size,
				);

  ### EXIT ON ERROR if there were errors with any of the supplied options
  unless ($command_line){
    die "Please respecify command line options\n";
  }

  ### HELPFILE
  if ($help){
    print_helpfile();
    exit;
  }

  @sorting_files = @ARGV;

  ### no files provided
  unless (@sorting_files){
    die "You need to provide one or more Bismark methylation caller files to create an individual C methylation bedGraph output. Please respecify!\n";
  }


  ### OUTPUT DIR PATH
  if (defined $output_dir){
    unless ($output_dir eq ''){ # if the output dir has been passed on by the methylation extractor and is an empty string we don't want to change it
      unless ($output_dir =~ /\/$/){
	$output_dir =~ s/$/\//;
      }
    }
  }
  else{
    $output_dir = '';
  }

  unless (defined $bedGraph_output){
    die "Please provide the name of the output file using the option -o/--output filename\n";
  }

  ### NO HEADER
  unless ($no_header){
    $no_header = 0;
  }

  ### remove white spaces in read ID (needed for sorting using the sort command
  unless ($remove){
    $remove = 0;
  }

  ### COVERAGE THRESHOLD FOR gedGraph OUTPUT
  if (defined $coverage_threshold){
    unless ($coverage_threshold > 0){
      die "Please select a coverage greater than 0 (positive integers only)\n";
    }
  }
  else{
    $coverage_threshold = 1;
  }

  ### SORT buffer size
  if (defined $sort_size){
    unless ($sort_size =~ /^\d+\%$/ or $sort_size =~ /^\d+(K|M|G|T)$/){
      die "Please select a buffer size as percentage (e.g. --buffer_size 20%) or a number to be multiplied with K, M, G, T etc. (e.g. --buffer_size 20G). For more information on sort type 'info sort' on a command line\n";
    }
  }
  else{
    $sort_size = '2G';
  }

  unless ($CX_context){
    $CX_context = 0;
  }

  unless ($counts){
    $counts = 0;
  }

  return ($bedGraph_output,$output_dir,$remove,$CX_context,$no_header,$sort_size,$coverage_threshold,$counts);
}

warn  "="x64,"\n";
warn "Methylation information will now be written into a bedGraph file\n";
warn  "="x64,"\n\n";
sleep (2);

### deciding which files to use for bedGraph conversion
open (OUT,'>',$output_dir.$bedGraph_output) or die "Problems with the bedGraph output filename detected: file path: '$output_dir'\tfile name: '$bedGraph_output' $!";
warn "Writing bedGraph to file: $bedGraph_output\n";

foreach my $filename (@sorting_files){

  if ($filename =~ /\//){ # if files are in a different output folder we extract the filename again
    $filename =~ s/.*\///; # replacing everything up to the last slash in the filename
    warn "$filename\n";
  }

  if ($CX_context){
    push @bedfiles,$filename;
  }
  else{ ## CpG context only (default)
    if ($filename =~ /^CpG_/){
      push @bedfiles,$filename;
    }
    else{
      # skipping CHH or CHG files
    }
  }
}

warn "Using the following files as Input:\n";
print join ("\t",@bedfiles),"\n\n";
sleep (2);

my %temp_fhs;
my @temp_files; # writing all context files (default CpG only) to these files prior to sorting

### changing to the output directory
unless ($output_dir eq ''){ # default
  chdir $output_dir or die "Failed to change directory to $output_dir\n";
  warn "Changed directory to $output_dir\n";
}

foreach my $infile (@bedfiles) {

  if ($remove) {
    warn "Now replacing whitespaces in the sequence ID field of the Bismark methylation extractor output $infile prior to bedGraph conversion\n\n";

    if ($infile =~ /gz$/){
      open (READ,"zcat $infile |") or die $!;
    }
    else{
      open (READ,$infile) or die $!;
    }

    my $removed_spaces_outfile = $infile;
    $removed_spaces_outfile =~ s/$/.spaces_removed.txt/;

    open (REM,'>',$output_dir.$removed_spaces_outfile) or die "Couldn't write to file $removed_spaces_outfile: $!\n";

    unless ($no_header){
      $_ = <READ>;		### Bismark version header
      print REM $_;		### Bismark version header
    }

    while (<READ>) {
      chomp;
      my ($id,$strand,$chr,$pos,$context) = (split (/\t/));
      $id =~ s/\s+/_/g;
      print REM join ("\t",$id,$strand,$chr,$pos,$context),"\n";
    }

    close READ or die $!;
    close REM or die $!;

    ### changing the infile name to the new file without spaces
    $infile = $removed_spaces_outfile;
  }

  warn "Now writing methylation information for file $infile to individual files for each chromosome\n";
  if ($infile =~ /gz$/){
    open (IN,"zcat $infile |") or die $!;
  }
  else{
    open (IN,$infile) or die $!;
  }

  ## always ignoring the version header
  unless ($no_header){
    $_ = <IN>;		### Bismark version header
  }
	
  while (<IN>) {
    chomp;
    my ($chr) = (split (/\t/))[2];
    # warn "This is the chromosome name before replacing '|' characters:\t$chr\n\n";
    $chr =~ s/\|/_/g; # replacing pipe ('|') characters in the file names
    # warn "This is the chromosome name AFTER replacing '|' characters:\t$chr\n\n";

    unless (exists $temp_fhs{$chr}) {
      open ($temp_fhs{$chr},'>','chr'.$chr.'.meth_extractor.temp') or die "Failed to open filehandle: $!";
    }
    print {$temp_fhs{$chr}} "$_\n";
  }

  warn "Finished writing out individual chromosome files for $infile\n";
}
warn "\n";

@temp_files = <*.meth_extractor.temp>;

warn "Collecting temporary chromosome file information...\n";
sleep (1);
warn "processing the following input file(s):\n";
warn join ("\n",@temp_files),"\n\n";
sleep (1);

foreach my $in (@temp_files) {
  if ($sort_size){
    warn "Sorting input file $in by positions (using -S of '$sort_size')\n";
  }
  else{
    warn "Sorting input file $in by positions (using default memory settings)\n";
  }
  my $sort_dir = $output_dir;
  if ($sort_dir eq ''){
    $sort_dir = './';
  }
  open my $ifh, "sort -S $sort_size -T $sort_dir -k3,3 -k4,4n $in |" or die "Input file could not be sorted. $!";
  # print "Chromosome\tStart Position\tEnd Position\tMethylation Percentage\n";

  ############################################# m.a.bentley - moved the variables out of the while loop to hold the current line data {

  my $name;
  my $meth_state;
  my $chr = "";
  my $pos = 0;
  my $meth_state2;

  my $last_pos;
  my $last_chr;
	
  #############################################  }
	
  while (my $line = <$ifh>) {
    next if $line =~ /^Bismark/;
    chomp $line;

    ########################################### m.a.bentley - (1) set the last_chr and last_pos variables early in the while loop, before the line split (2) removed unnecessary setting of same variables in if statement {

    $last_chr = $chr;
    $last_pos = $pos;
    ($name, $meth_state, $chr, $pos, $meth_state2) = split "\t", $line;

    if (($last_pos ne $pos) || ($last_chr ne $chr)) {
      generate_output($last_chr,$last_pos) if $methylcalls[2] > 0;
      @methylcalls = qw (0 0 0);
    }

    #############################################  }

    my $validated = validate_methylation_call($meth_state, $meth_state2);
    unless($validated){
      warn "Methylation state of sequence ($name) in file ($in) on line $. is inconsistent (meth_state is $meth_state, meth_state2 = $meth_state2)\n";
      next;
    }
    if ($meth_state eq "+") {
      $methylcalls[0]++;
      $methylcalls[2]++;
    } else {
      $methylcalls[1]++;
      $methylcalls[2]++;
    }
  }

  ############################################# m.a.bentley - set the last_chr and last_pos variables for the last line in the file (outside the while loop's scope using the method i've implemented) {
	
  $last_chr = $chr;
  $last_pos = $pos;
  if ($methylcalls[2] > 0) {
    generate_output($last_chr,$last_pos) if $methylcalls[2] > 0;
  }
  #############################################  }
	
  close $ifh or die $!;
	
  @methylcalls = qw (0 0 0); # resetting @methylcalls

  ### deleting temporary files
  my $delete = unlink $in;
  if ($delete) {
    warn "Successfully deleted the temporary input file $in\n\n";
  }
  else {
    warn "The temporary inputfile $in could not be deleted $!\n\n";
  }
}

close OUT or die $!;
exit 1;



sub validate_methylation_call{
  my $meth_state = shift;
  croak "Missing (+/-) methylation call" unless defined $meth_state;
  my $meth_state2 = shift;
  croak "Missing alphabetical methylation call" unless defined $meth_state2;
  my $is_consistent;
  ($meth_state2 =~ /^z/i) ? ($is_consistent = check_CpG_methylation_call($meth_state, $meth_state2)) 
                          : ($is_consistent = check_nonCpG_methylation_call($meth_state,$meth_state2));
  return 1 if $is_consistent;
  return 0;
}

sub check_CpG_methylation_call{
  my $meth1 = shift;
  my $meth2 = shift;
  return 1 if($meth1 eq "+" && $meth2 eq "Z");
  return 1 if($meth1 eq "-" && $meth2 eq "z");
  return 0;
}

sub check_nonCpG_methylation_call{
  my $meth1 = shift;
  my $meth2 = shift;
  return 1 if($meth1 eq "+" && $meth2 eq "C");
  return 1 if($meth1 eq "+" && $meth2 eq "X");
  return 1 if($meth1 eq "+" && $meth2 eq "H");
  return 1 if($meth1 eq "-" && $meth2 eq "c");
  return 1 if($meth1 eq "-" && $meth2 eq "x");
  return 1 if($meth1 eq "-" && $meth2 eq "h");
  return 0;
}

sub generate_output{
  my $methcount = $methylcalls[0];
  my $nonmethcount = $methylcalls[1];
  my $totalcount = $methylcalls[2];
  my $last_chr = shift;
  my $last_pos = shift;
  croak "Should not be generating output if there's no reads to this region" unless $totalcount > 0;
  croak "Total counts ($totalcount) is not the sum of the methylated ($methcount) and unmethylated ($nonmethcount) counts" if $totalcount != ($methcount + $nonmethcount);

  ############################################# m.a.bentley - declare a new variable 'bed_pos' to distinguish from bismark positions (-1) - previous scripts modified the last_pos variable earlier in the script leading to problems in meth % calculation {

  my $bed_pos = $last_pos -1; ### Bismark coordinates are 1 based whereas bedGraph coordinates are 0 based.
  my $meth_percentage;
  ($totalcount >= $coverage_threshold) ? ($meth_percentage = ($methcount/$totalcount) * 100) : ($meth_percentage = undef);
  # $meth_percentage =~ s/(\.\d\d).+$/$1/ unless $meth_percentage =~ /^Below/;
  if (defined $meth_percentage){
    if ($counts){
      print OUT "$last_chr\t$bed_pos\t$bed_pos\t$meth_percentage\t$methcount\t$nonmethcount\n";
    }
    else{
      print OUT "$last_chr\t$bed_pos\t$bed_pos\t$meth_percentage\n";
    }
  }
  #############################################  }
}


sub print_helpfile{
  print <<EOF

  USAGE: genome_methylation_bismark2bedGraph.pl [options] -o <output> [methylation extractor input files]

Methylation extractor input files: These files are required to start with CpG_ in order for the
script to correctly work out the sequence context when using CpG only (default) context. If all cytosine 
contexts are selected ((--CX_context), all input files will be used regardless of their file name(s).


-o/--output <filename>     Name of the output file, mandatory.

--dir                      Output directory. Output is written to the current directory if not specified explicitly.

--cutoff [threshold]       The minimum number of times a methylation state has to be seen for that nucleotide
                           before its methylation percentage is reported. Default: 1.

--remove_spaces            Replaces whitespaces in the sequence ID field with underscores to allow sorting.

--counts                   Adds two additional columns to the output file to enable further calculations:
                             col 5: number of methylated calls
                             col 6: number of unmethylated calls
                           This option is required to genereate a cytosine report later.

--CX/--CX_context          The sorted bedGraph output file contains information on every single cytosine that was covered
                           in the experiment irrespective of its sequence context. This applies to both forward and
                           reverse strands. Please be aware that this option may generate large temporary and output files
                           and may take a long time to sort (up to many hours). Default: OFF. 
                           (i.e. Default = CpG context only).

--buffer_size <string>     This allows you to specify the main memory sort buffer when sorting the methylation information.
                           Either specify a percentage of physical memory by appending % (e.g. --buffer_size 50%) or
			   a multiple of 1024 bytes, e.g. 'K' multiplies by 1024, 'M' by 1048576 and so on for 'T' etc.
                           (e.g. --buffer_size 20G). For more information on sort type 'info sort' on a command line.
                           Defaults to 2G.



The bedGraph output looks like this (tab-delimited):
====================================================

<chromosome>  <start position>  <end position>  <methylation percentage>


The bedGraph output with '--counts' specified looks like this (tab-delimited):
==============================================================================

<chromosome>  <start position>  <end position>  <methylation percentage>  <count methylated>  <count non-methylated>


Please note that the option '--counts' adds 2 additional columns, so it is technically no longer in bedGraph format!


                          Script last modified: 19 April 2013.

EOF
    ;
  exit 1;
}
